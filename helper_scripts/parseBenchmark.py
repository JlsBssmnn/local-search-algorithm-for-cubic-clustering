import re
from os import path
import pandas as pd
import argparse

def parseBenchmarkToCsv(benchmark: str, exportPath: str = '', name: str = ''):
  '''
  Read the benchmark file generated by go testing and parse the results in a csv.
  For the parsing to work the benchmarks have to follow a certain naming scheme,
  where the parameters of the benchmark with their value are comma seperated and between
  a parameter and it's value has to be a colon and a space. Example: `param1: value1, param2: value2`

  Parameters
  ----------
  benchmark: The name of the benchmark file, the file has to be in the `temp/benchmarks` folder
  exportPath: The path where the csv will be exported, default: `/temp/benchmarks`
  name: The name of the exported csv file, default: same as benchmark file
  '''
  if name == '':
    if any([benchmark.endswith(x) for x in ['.log', '.txt']]):
      name = benchmark[:benchmark.rfind('.')]
    else:
      name = benchmark
  if exportPath == '':
    exportPath = path.realpath('./temp/benchmarks/')
  benchmarkFile = open(path.realpath(path.join('./temp/benchmarks/', benchmark)), 'r', encoding='utf-16-le')
  data = {}
  firstLineParsed = False

  for line in benchmarkFile:
    if not line.startswith('Benchmark'):
      continue
    line = line[line.find('/') + 1:]

    # parse the parameters of a line
    colonIndex = line.find(':')
    while colonIndex != -1:
      parameter = line[:colonIndex]
      line = line[colonIndex + 2:]

      endIndex = line.find(',')
      if endIndex == -1:
        endIndex = line.find('-')
      value = line[:endIndex]
      line = line[endIndex + 2:]
      if not firstLineParsed:
        data[parameter] = [value]
      elif parameter in data:
        data[parameter].append(value)
      colonIndex = line.find(':')

    # parse the benchmark values of a line
    line = re.split('\s\s|\t', line)
    line = [re.findall('\d+', x)[0] for x in line if re.search('\d', x)]
    if not firstLineParsed:
      data["Iterations"] = [line[0]]
      data["ns/op"] = [line[1]]
      data["B/op"] = [line[2]]
      data["allocs/op"] = [line[3]]
    else:
      data["Iterations"].append(line[0])
      data["ns/op"].append(line[1])
      data["B/op"].append(line[2])
      data["allocs/op"].append(line[3])

    firstLineParsed = True

  df = pd.DataFrame.from_dict(data)
  df.to_csv(path.join(exportPath, name + '.csv'))

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Utility for parsing a go benchmark file')
  parser.add_argument('benchmarkName', type=str, help='The name of the benchmark file, the file has to be in /temp/benchmarks')
  parser.add_argument('-e', '--exportPath', type=str, default='', help='The destination of the parsed file, default: /temp/benchmarks')
  parser.add_argument('-n', '--name', type=str, default='', help='The name of the exported file, default: name of benchmark file')

  args = parser.parse_args()
  parseBenchmarkToCsv(args.benchmarkName, args.exportPath, args.name)
